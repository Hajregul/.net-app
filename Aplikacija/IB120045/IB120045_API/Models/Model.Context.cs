//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IB120045_API.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class StarackiEntities : DbContext
    {
        public StarackiEntities()
            : base("name=StarackiEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AktivnostiKomentari> AktivnostiKomentari { get; set; }
        public virtual DbSet<AktivnostiKorisnici> AktivnostiKorisnici { get; set; }
        public virtual DbSet<Aktovnosti> Aktovnosti { get; set; }
        public virtual DbSet<Dijagnoze> Dijagnoze { get; set; }
        public virtual DbSet<Korisnici> Korisnici { get; set; }
        public virtual DbSet<Ocjene> Ocjene { get; set; }
        public virtual DbSet<Pacijenti> Pacijenti { get; set; }
        public virtual DbSet<Pregledi> Pregledi { get; set; }
        public virtual DbSet<Skrbnici> Skrbnici { get; set; }
        public virtual DbSet<Sobe> Sobe { get; set; }
        public virtual DbSet<Spol> Spol { get; set; }
        public virtual DbSet<Spratovi> Spratovi { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Terapije> Terapije { get; set; }
        public virtual DbSet<TipoviSoba> TipoviSoba { get; set; }
        public virtual DbSet<Uloge> Uloge { get; set; }
        public virtual DbSet<VrstaAktivnosti> VrstaAktivnosti { get; set; }
        public virtual DbSet<ZahtejviZaPrijavuUDom> ZahtejviZaPrijavuUDom { get; set; }
        public virtual DbSet<Zaposlenici> Zaposlenici { get; set; }
    
        public virtual ObjectResult<AktivnostById_Result> AktivnostById(Nullable<int> aktivnostID)
        {
            var aktivnostIDParameter = aktivnostID.HasValue ?
                new ObjectParameter("aktivnostID", aktivnostID) :
                new ObjectParameter("aktivnostID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AktivnostById_Result>("AktivnostById", aktivnostIDParameter);
        }
    
        public virtual int AktovnostiInsertt(string naziv, Nullable<System.DateTime> datum, byte[] slika, byte[] slikathumb, Nullable<bool> prijavaNaAktivnost, Nullable<bool> odobrenjeaktivnosti, Nullable<int> zaposlenikID, string ogranicenje, Nullable<int> vrstaIdId)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("naziv", naziv) :
                new ObjectParameter("naziv", typeof(string));
    
            var datumParameter = datum.HasValue ?
                new ObjectParameter("datum", datum) :
                new ObjectParameter("datum", typeof(System.DateTime));
    
            var slikaParameter = slika != null ?
                new ObjectParameter("slika", slika) :
                new ObjectParameter("slika", typeof(byte[]));
    
            var slikathumbParameter = slikathumb != null ?
                new ObjectParameter("slikathumb", slikathumb) :
                new ObjectParameter("slikathumb", typeof(byte[]));
    
            var prijavaNaAktivnostParameter = prijavaNaAktivnost.HasValue ?
                new ObjectParameter("prijavaNaAktivnost", prijavaNaAktivnost) :
                new ObjectParameter("prijavaNaAktivnost", typeof(bool));
    
            var odobrenjeaktivnostiParameter = odobrenjeaktivnosti.HasValue ?
                new ObjectParameter("odobrenjeaktivnosti", odobrenjeaktivnosti) :
                new ObjectParameter("odobrenjeaktivnosti", typeof(bool));
    
            var zaposlenikIDParameter = zaposlenikID.HasValue ?
                new ObjectParameter("zaposlenikID", zaposlenikID) :
                new ObjectParameter("zaposlenikID", typeof(int));
    
            var ogranicenjeParameter = ogranicenje != null ?
                new ObjectParameter("ogranicenje", ogranicenje) :
                new ObjectParameter("ogranicenje", typeof(string));
    
            var vrstaIdIdParameter = vrstaIdId.HasValue ?
                new ObjectParameter("vrstaIdId", vrstaIdId) :
                new ObjectParameter("vrstaIdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AktovnostiInsertt", nazivParameter, datumParameter, slikaParameter, slikathumbParameter, prijavaNaAktivnostParameter, odobrenjeaktivnostiParameter, zaposlenikIDParameter, ogranicenjeParameter, vrstaIdIdParameter);
        }
    
        public virtual ObjectResult<AllAktivnostii_Result> AllAktivnostii()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllAktivnostii_Result>("AllAktivnostii");
        }
    
        public virtual ObjectResult<AllKorisnici_Result> AllKorisnici()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllKorisnici_Result>("AllKorisnici");
        }
    
        public virtual ObjectResult<AllKorisniciNaAktivnosti_Result> AllKorisniciNaAktivnosti(Nullable<int> aktivnostiID)
        {
            var aktivnostiIDParameter = aktivnostiID.HasValue ?
                new ObjectParameter("AktivnostiID", aktivnostiID) :
                new ObjectParameter("AktivnostiID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllKorisniciNaAktivnosti_Result>("AllKorisniciNaAktivnosti", aktivnostiIDParameter);
        }
    
        public virtual ObjectResult<AllOcjene_Result> AllOcjene()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllOcjene_Result>("AllOcjene");
        }
    
        public virtual ObjectResult<AllPacijenti_Result> AllPacijenti()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllPacijenti_Result>("AllPacijenti");
        }
    
        public virtual ObjectResult<AllSkrbnici_Result> AllSkrbnici()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllSkrbnici_Result>("AllSkrbnici");
        }
    
        public virtual ObjectResult<AllSobe2_Result> AllSobe2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllSobe2_Result>("AllSobe2");
        }
    
        public virtual ObjectResult<AllSpol_Result> AllSpol()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllSpol_Result>("AllSpol");
        }
    
        public virtual ObjectResult<AllUloge_Result> AllUloge()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllUloge_Result>("AllUloge");
        }
    
        public virtual ObjectResult<AllVrstaAktivnosti_Result> AllVrstaAktivnosti()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllVrstaAktivnosti_Result>("AllVrstaAktivnosti");
        }
    
        public virtual ObjectResult<AllVrstaAktivnosti1_Result> AllVrstaAktivnosti1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllVrstaAktivnosti1_Result>("AllVrstaAktivnosti1");
        }
    
        public virtual ObjectResult<AllZahtjevi_Result> AllZahtjevi()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllZahtjevi_Result>("AllZahtjevi");
        }
    
        public virtual ObjectResult<AllZahtjevi1_Result> AllZahtjevi1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllZahtjevi1_Result>("AllZahtjevi1");
        }
    
        public virtual ObjectResult<AllZaposlenici_Result> AllZaposlenici()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllZaposlenici_Result>("AllZaposlenici");
        }
    
        public virtual int esp_Aktivnosti_del(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_Aktivnosti_del", idParameter);
        }
    
        public virtual int esp_Aktivnosti_Update(Nullable<int> id, string naziv, string ogranicenje, Nullable<System.DateTime> datum, Nullable<int> vrstaid, Nullable<System.TimeSpan> vrijeme, Nullable<bool> stalna, byte[] slika, byte[] slikaThumb, Nullable<bool> prijavaNaAktivnost, Nullable<int> zaposlenikID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nazivParameter = naziv != null ?
                new ObjectParameter("naziv", naziv) :
                new ObjectParameter("naziv", typeof(string));
    
            var ogranicenjeParameter = ogranicenje != null ?
                new ObjectParameter("ogranicenje", ogranicenje) :
                new ObjectParameter("ogranicenje", typeof(string));
    
            var datumParameter = datum.HasValue ?
                new ObjectParameter("datum", datum) :
                new ObjectParameter("datum", typeof(System.DateTime));
    
            var vrstaidParameter = vrstaid.HasValue ?
                new ObjectParameter("vrstaid", vrstaid) :
                new ObjectParameter("vrstaid", typeof(int));
    
            var vrijemeParameter = vrijeme.HasValue ?
                new ObjectParameter("vrijeme", vrijeme) :
                new ObjectParameter("vrijeme", typeof(System.TimeSpan));
    
            var stalnaParameter = stalna.HasValue ?
                new ObjectParameter("stalna", stalna) :
                new ObjectParameter("stalna", typeof(bool));
    
            var slikaParameter = slika != null ?
                new ObjectParameter("slika", slika) :
                new ObjectParameter("slika", typeof(byte[]));
    
            var slikaThumbParameter = slikaThumb != null ?
                new ObjectParameter("slikaThumb", slikaThumb) :
                new ObjectParameter("slikaThumb", typeof(byte[]));
    
            var prijavaNaAktivnostParameter = prijavaNaAktivnost.HasValue ?
                new ObjectParameter("PrijavaNaAktivnost", prijavaNaAktivnost) :
                new ObjectParameter("PrijavaNaAktivnost", typeof(bool));
    
            var zaposlenikIDParameter = zaposlenikID.HasValue ?
                new ObjectParameter("ZaposlenikID", zaposlenikID) :
                new ObjectParameter("ZaposlenikID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_Aktivnosti_Update", idParameter, nazivParameter, ogranicenjeParameter, datumParameter, vrstaidParameter, vrijemeParameter, stalnaParameter, slikaParameter, slikaThumbParameter, prijavaNaAktivnostParameter, zaposlenikIDParameter);
        }
    
        public virtual int esp_Aktivnosti_Update1(Nullable<int> id, string naziv, string ogranicenje, Nullable<System.DateTime> datum, Nullable<int> vrstaid, Nullable<System.TimeSpan> vrijeme, Nullable<bool> stalna, byte[] slika, byte[] slikaThumb, Nullable<bool> prijavaNaAktivnost, Nullable<int> zaposlenikID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nazivParameter = naziv != null ?
                new ObjectParameter("naziv", naziv) :
                new ObjectParameter("naziv", typeof(string));
    
            var ogranicenjeParameter = ogranicenje != null ?
                new ObjectParameter("ogranicenje", ogranicenje) :
                new ObjectParameter("ogranicenje", typeof(string));
    
            var datumParameter = datum.HasValue ?
                new ObjectParameter("datum", datum) :
                new ObjectParameter("datum", typeof(System.DateTime));
    
            var vrstaidParameter = vrstaid.HasValue ?
                new ObjectParameter("vrstaid", vrstaid) :
                new ObjectParameter("vrstaid", typeof(int));
    
            var vrijemeParameter = vrijeme.HasValue ?
                new ObjectParameter("vrijeme", vrijeme) :
                new ObjectParameter("vrijeme", typeof(System.TimeSpan));
    
            var stalnaParameter = stalna.HasValue ?
                new ObjectParameter("stalna", stalna) :
                new ObjectParameter("stalna", typeof(bool));
    
            var slikaParameter = slika != null ?
                new ObjectParameter("slika", slika) :
                new ObjectParameter("slika", typeof(byte[]));
    
            var slikaThumbParameter = slikaThumb != null ?
                new ObjectParameter("slikaThumb", slikaThumb) :
                new ObjectParameter("slikaThumb", typeof(byte[]));
    
            var prijavaNaAktivnostParameter = prijavaNaAktivnost.HasValue ?
                new ObjectParameter("PrijavaNaAktivnost", prijavaNaAktivnost) :
                new ObjectParameter("PrijavaNaAktivnost", typeof(bool));
    
            var zaposlenikIDParameter = zaposlenikID.HasValue ?
                new ObjectParameter("ZaposlenikID", zaposlenikID) :
                new ObjectParameter("ZaposlenikID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_Aktivnosti_Update1", idParameter, nazivParameter, ogranicenjeParameter, datumParameter, vrstaidParameter, vrijemeParameter, stalnaParameter, slikaParameter, slikaThumbParameter, prijavaNaAktivnostParameter, zaposlenikIDParameter);
        }
    
        public virtual int esp_Aktivnosti_Update2(Nullable<int> id, string naziv, string ogranicenje, Nullable<System.DateTime> datum, Nullable<int> vrstaid, Nullable<System.TimeSpan> vrijeme, Nullable<bool> stalna, byte[] slika, byte[] slikaThumb, Nullable<int> zaposlenikID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nazivParameter = naziv != null ?
                new ObjectParameter("naziv", naziv) :
                new ObjectParameter("naziv", typeof(string));
    
            var ogranicenjeParameter = ogranicenje != null ?
                new ObjectParameter("ogranicenje", ogranicenje) :
                new ObjectParameter("ogranicenje", typeof(string));
    
            var datumParameter = datum.HasValue ?
                new ObjectParameter("datum", datum) :
                new ObjectParameter("datum", typeof(System.DateTime));
    
            var vrstaidParameter = vrstaid.HasValue ?
                new ObjectParameter("vrstaid", vrstaid) :
                new ObjectParameter("vrstaid", typeof(int));
    
            var vrijemeParameter = vrijeme.HasValue ?
                new ObjectParameter("vrijeme", vrijeme) :
                new ObjectParameter("vrijeme", typeof(System.TimeSpan));
    
            var stalnaParameter = stalna.HasValue ?
                new ObjectParameter("stalna", stalna) :
                new ObjectParameter("stalna", typeof(bool));
    
            var slikaParameter = slika != null ?
                new ObjectParameter("slika", slika) :
                new ObjectParameter("slika", typeof(byte[]));
    
            var slikaThumbParameter = slikaThumb != null ?
                new ObjectParameter("slikaThumb", slikaThumb) :
                new ObjectParameter("slikaThumb", typeof(byte[]));
    
            var zaposlenikIDParameter = zaposlenikID.HasValue ?
                new ObjectParameter("ZaposlenikID", zaposlenikID) :
                new ObjectParameter("ZaposlenikID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_Aktivnosti_Update2", idParameter, nazivParameter, ogranicenjeParameter, datumParameter, vrstaidParameter, vrijemeParameter, stalnaParameter, slikaParameter, slikaThumbParameter, zaposlenikIDParameter);
        }
    
        public virtual int esp_AktivnostiKomentari_del(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_AktivnostiKomentari_del", idParameter);
        }
    
        public virtual int esp_AktivnostiKorisnici_del(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_AktivnostiKorisnici_del", idParameter);
        }
    
        public virtual int esp_AktivnostiOcjene_del(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_AktivnostiOcjene_del", idParameter);
        }
    
        public virtual ObjectResult<esp_AllPregledi_Result> esp_AllPregledi()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<esp_AllPregledi_Result>("esp_AllPregledi");
        }
    
        public virtual ObjectResult<esp_AllPregledi1_Result> esp_AllPregledi1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<esp_AllPregledi1_Result>("esp_AllPregledi1");
        }
    
        public virtual int esp_Dijagnoze1_del(Nullable<int> id, Nullable<int> dijagnozaID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var dijagnozaIDParameter = dijagnozaID.HasValue ?
                new ObjectParameter("dijagnozaID", dijagnozaID) :
                new ObjectParameter("dijagnozaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_Dijagnoze1_del", idParameter, dijagnozaIDParameter);
        }
    
        public virtual ObjectResult<esp_ListaAktivnosti_Result> esp_ListaAktivnosti()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<esp_ListaAktivnosti_Result>("esp_ListaAktivnosti");
        }
    
        public virtual int esp_OdobrenjeRegistracije(Nullable<int> korisnikID)
        {
            var korisnikIDParameter = korisnikID.HasValue ?
                new ObjectParameter("KorisnikID", korisnikID) :
                new ObjectParameter("KorisnikID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_OdobrenjeRegistracije", korisnikIDParameter);
        }
    
        public virtual int esp_Pregled_del(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_Pregled_del", idParameter);
        }
    
        public virtual ObjectResult<esp_PregledByID_Result> esp_PregledByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<esp_PregledByID_Result>("esp_PregledByID", idParameter);
        }
    
        public virtual ObjectResult<esp_PregledByPacijentID_Result> esp_PregledByPacijentID(Nullable<int> pacijentID)
        {
            var pacijentIDParameter = pacijentID.HasValue ?
                new ObjectParameter("PacijentID", pacijentID) :
                new ObjectParameter("PacijentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<esp_PregledByPacijentID_Result>("esp_PregledByPacijentID", pacijentIDParameter);
        }
    
        public virtual ObjectResult<esp_PregledKorisnikaDoma2_Result> esp_PregledKorisnikaDoma2(string jmbg, string korisnickoIme)
        {
            var jmbgParameter = jmbg != null ?
                new ObjectParameter("jmbg", jmbg) :
                new ObjectParameter("jmbg", typeof(string));
    
            var korisnickoImeParameter = korisnickoIme != null ?
                new ObjectParameter("KorisnickoIme", korisnickoIme) :
                new ObjectParameter("KorisnickoIme", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<esp_PregledKorisnikaDoma2_Result>("esp_PregledKorisnikaDoma2", jmbgParameter, korisnickoImeParameter);
        }
    
        public virtual ObjectResult<esp_PregledKorisnikaDomaALL_Result> esp_PregledKorisnikaDomaALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<esp_PregledKorisnikaDomaALL_Result>("esp_PregledKorisnikaDomaALL");
        }
    
        public virtual int esp_Terapije_del(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_Terapije_del", idParameter);
        }
    
        public virtual ObjectResult<esp_ZahtjeviKorisnikaZaRegistraciju_Result> esp_ZahtjeviKorisnikaZaRegistraciju()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<esp_ZahtjeviKorisnikaZaRegistraciju_Result>("esp_ZahtjeviKorisnikaZaRegistraciju");
        }
    
        public virtual int esp_ZauzmiSobu(Nullable<int> sobaID)
        {
            var sobaIDParameter = sobaID.HasValue ?
                new ObjectParameter("SobaID", sobaID) :
                new ObjectParameter("SobaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("esp_ZauzmiSobu", sobaIDParameter);
        }
    
        public virtual int InserDijagnoza(string naziv, string opis, Nullable<int> pregledID)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            var opisParameter = opis != null ?
                new ObjectParameter("Opis", opis) :
                new ObjectParameter("Opis", typeof(string));
    
            var pregledIDParameter = pregledID.HasValue ?
                new ObjectParameter("PregledID", pregledID) :
                new ObjectParameter("PregledID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InserDijagnoza", nazivParameter, opisParameter, pregledIDParameter);
        }
    
        public virtual int InserPregledi(Nullable<System.DateTime> datumPregleda, Nullable<decimal> tezina, Nullable<decimal> visina, string tlak, Nullable<decimal> secer, string opis, Nullable<int> zaposlenikID, Nullable<int> pacijentID)
        {
            var datumPregledaParameter = datumPregleda.HasValue ?
                new ObjectParameter("DatumPregleda", datumPregleda) :
                new ObjectParameter("DatumPregleda", typeof(System.DateTime));
    
            var tezinaParameter = tezina.HasValue ?
                new ObjectParameter("Tezina", tezina) :
                new ObjectParameter("Tezina", typeof(decimal));
    
            var visinaParameter = visina.HasValue ?
                new ObjectParameter("Visina", visina) :
                new ObjectParameter("Visina", typeof(decimal));
    
            var tlakParameter = tlak != null ?
                new ObjectParameter("Tlak", tlak) :
                new ObjectParameter("Tlak", typeof(string));
    
            var secerParameter = secer.HasValue ?
                new ObjectParameter("Secer", secer) :
                new ObjectParameter("Secer", typeof(decimal));
    
            var opisParameter = opis != null ?
                new ObjectParameter("Opis", opis) :
                new ObjectParameter("Opis", typeof(string));
    
            var zaposlenikIDParameter = zaposlenikID.HasValue ?
                new ObjectParameter("ZaposlenikID", zaposlenikID) :
                new ObjectParameter("ZaposlenikID", typeof(int));
    
            var pacijentIDParameter = pacijentID.HasValue ?
                new ObjectParameter("PacijentID", pacijentID) :
                new ObjectParameter("PacijentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InserPregledi", datumPregledaParameter, tezinaParameter, visinaParameter, tlakParameter, secerParameter, opisParameter, zaposlenikIDParameter, pacijentIDParameter);
        }
    
        public virtual int InserPregledi1(Nullable<System.DateTime> datumPregleda, Nullable<decimal> tezina, Nullable<decimal> visina, string tlak, Nullable<decimal> secer, string opis, Nullable<int> zaposlenikID, Nullable<int> pacijentID)
        {
            var datumPregledaParameter = datumPregleda.HasValue ?
                new ObjectParameter("DatumPregleda", datumPregleda) :
                new ObjectParameter("DatumPregleda", typeof(System.DateTime));
    
            var tezinaParameter = tezina.HasValue ?
                new ObjectParameter("Tezina", tezina) :
                new ObjectParameter("Tezina", typeof(decimal));
    
            var visinaParameter = visina.HasValue ?
                new ObjectParameter("Visina", visina) :
                new ObjectParameter("Visina", typeof(decimal));
    
            var tlakParameter = tlak != null ?
                new ObjectParameter("Tlak", tlak) :
                new ObjectParameter("Tlak", typeof(string));
    
            var secerParameter = secer.HasValue ?
                new ObjectParameter("Secer", secer) :
                new ObjectParameter("Secer", typeof(decimal));
    
            var opisParameter = opis != null ?
                new ObjectParameter("Opis", opis) :
                new ObjectParameter("Opis", typeof(string));
    
            var zaposlenikIDParameter = zaposlenikID.HasValue ?
                new ObjectParameter("ZaposlenikID", zaposlenikID) :
                new ObjectParameter("ZaposlenikID", typeof(int));
    
            var pacijentIDParameter = pacijentID.HasValue ?
                new ObjectParameter("PacijentID", pacijentID) :
                new ObjectParameter("PacijentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InserPregledi1", datumPregledaParameter, tezinaParameter, visinaParameter, tlakParameter, secerParameter, opisParameter, zaposlenikIDParameter, pacijentIDParameter);
        }
    
        public virtual int InsertAktivnostiKomentar(string komentar, Nullable<int> korisnikID, Nullable<int> aktivnostID, Nullable<System.DateTime> datumKomentiranja)
        {
            var komentarParameter = komentar != null ?
                new ObjectParameter("Komentar", komentar) :
                new ObjectParameter("Komentar", typeof(string));
    
            var korisnikIDParameter = korisnikID.HasValue ?
                new ObjectParameter("KorisnikID", korisnikID) :
                new ObjectParameter("KorisnikID", typeof(int));
    
            var aktivnostIDParameter = aktivnostID.HasValue ?
                new ObjectParameter("AktivnostID", aktivnostID) :
                new ObjectParameter("AktivnostID", typeof(int));
    
            var datumKomentiranjaParameter = datumKomentiranja.HasValue ?
                new ObjectParameter("DatumKomentiranja", datumKomentiranja) :
                new ObjectParameter("DatumKomentiranja", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAktivnostiKomentar", komentarParameter, korisnikIDParameter, aktivnostIDParameter, datumKomentiranjaParameter);
        }
    
        public virtual int InserTerapije(string naziv, Nullable<System.DateTime> datumPocetka, Nullable<System.DateTime> datumKraja, Nullable<int> dijagnozaID)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            var datumPocetkaParameter = datumPocetka.HasValue ?
                new ObjectParameter("DatumPocetka", datumPocetka) :
                new ObjectParameter("DatumPocetka", typeof(System.DateTime));
    
            var datumKrajaParameter = datumKraja.HasValue ?
                new ObjectParameter("DatumKraja", datumKraja) :
                new ObjectParameter("DatumKraja", typeof(System.DateTime));
    
            var dijagnozaIDParameter = dijagnozaID.HasValue ?
                new ObjectParameter("DijagnozaID", dijagnozaID) :
                new ObjectParameter("DijagnozaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InserTerapije", nazivParameter, datumPocetkaParameter, datumKrajaParameter, dijagnozaIDParameter);
        }
    
        public virtual int InsertZahtejviZaPrijavuUDom(Nullable<bool> odobreno, Nullable<System.DateTime> datumPrijave, Nullable<System.DateTime> datumOdobrenja, Nullable<int> korisnikID, Nullable<int> pacijentID)
        {
            var odobrenoParameter = odobreno.HasValue ?
                new ObjectParameter("Odobreno", odobreno) :
                new ObjectParameter("Odobreno", typeof(bool));
    
            var datumPrijaveParameter = datumPrijave.HasValue ?
                new ObjectParameter("DatumPrijave", datumPrijave) :
                new ObjectParameter("DatumPrijave", typeof(System.DateTime));
    
            var datumOdobrenjaParameter = datumOdobrenja.HasValue ?
                new ObjectParameter("DatumOdobrenja", datumOdobrenja) :
                new ObjectParameter("DatumOdobrenja", typeof(System.DateTime));
    
            var korisnikIDParameter = korisnikID.HasValue ?
                new ObjectParameter("KorisnikID", korisnikID) :
                new ObjectParameter("KorisnikID", typeof(int));
    
            var pacijentIDParameter = pacijentID.HasValue ?
                new ObjectParameter("PacijentID", pacijentID) :
                new ObjectParameter("PacijentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertZahtejviZaPrijavuUDom", odobrenoParameter, datumPrijaveParameter, datumOdobrenjaParameter, korisnikIDParameter, pacijentIDParameter);
        }
    
        public virtual int KorisniciInsert1(string ime, string prezime, string grad, string mail, string korisnickoIme, string lozinkaS, string lozinkaH, Nullable<System.DateTime> datumRegistracije, Nullable<bool> statusPrijave)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("Prezime", prezime) :
                new ObjectParameter("Prezime", typeof(string));
    
            var gradParameter = grad != null ?
                new ObjectParameter("Grad", grad) :
                new ObjectParameter("Grad", typeof(string));
    
            var mailParameter = mail != null ?
                new ObjectParameter("Mail", mail) :
                new ObjectParameter("Mail", typeof(string));
    
            var korisnickoImeParameter = korisnickoIme != null ?
                new ObjectParameter("KorisnickoIme", korisnickoIme) :
                new ObjectParameter("KorisnickoIme", typeof(string));
    
            var lozinkaSParameter = lozinkaS != null ?
                new ObjectParameter("LozinkaS", lozinkaS) :
                new ObjectParameter("LozinkaS", typeof(string));
    
            var lozinkaHParameter = lozinkaH != null ?
                new ObjectParameter("LozinkaH", lozinkaH) :
                new ObjectParameter("LozinkaH", typeof(string));
    
            var datumRegistracijeParameter = datumRegistracije.HasValue ?
                new ObjectParameter("DatumRegistracije", datumRegistracije) :
                new ObjectParameter("DatumRegistracije", typeof(System.DateTime));
    
            var statusPrijaveParameter = statusPrijave.HasValue ?
                new ObjectParameter("statusPrijave", statusPrijave) :
                new ObjectParameter("statusPrijave", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("KorisniciInsert1", imeParameter, prezimeParameter, gradParameter, mailParameter, korisnickoImeParameter, lozinkaSParameter, lozinkaHParameter, datumRegistracijeParameter, statusPrijaveParameter);
        }
    
        public virtual ObjectResult<KorisnikByKorisnickoImeStatusPrijava_Result> KorisnikByKorisnickoImeStatusPrijava(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<KorisnikByKorisnickoImeStatusPrijava_Result>("KorisnikByKorisnickoImeStatusPrijava", nameParameter);
        }
    
        public virtual ObjectResult<korisnikLastByID_Result> korisnikLastByID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<korisnikLastByID_Result>("korisnikLastByID");
        }
    
        public virtual ObjectResult<LastDijagnoza_Result> LastDijagnoza(Nullable<int> dijagnozaID)
        {
            var dijagnozaIDParameter = dijagnozaID.HasValue ?
                new ObjectParameter("DijagnozaID", dijagnozaID) :
                new ObjectParameter("DijagnozaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LastDijagnoza_Result>("LastDijagnoza", dijagnozaIDParameter);
        }
    
        public virtual ObjectResult<LastDijagnoze1_Result> LastDijagnoze1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LastDijagnoze1_Result>("LastDijagnoze1");
        }
    
        public virtual ObjectResult<LastPregled_Result> LastPregled(Nullable<int> pregledID)
        {
            var pregledIDParameter = pregledID.HasValue ?
                new ObjectParameter("PregledID", pregledID) :
                new ObjectParameter("PregledID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LastPregled_Result>("LastPregled", pregledIDParameter);
        }
    
        public virtual ObjectResult<LastPregled1_Result> LastPregled1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LastPregled1_Result>("LastPregled1");
        }
    
        public virtual ObjectResult<OdobrenjeZahtjeva_Result> OdobrenjeZahtjeva(Nullable<int> korisnikID)
        {
            var korisnikIDParameter = korisnikID.HasValue ?
                new ObjectParameter("KorisnikID", korisnikID) :
                new ObjectParameter("KorisnikID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OdobrenjeZahtjeva_Result>("OdobrenjeZahtjeva", korisnikIDParameter);
        }
    
        public virtual int OdobriPrijavuUDom(Nullable<int> zahtjevID, Nullable<bool> odobreno)
        {
            var zahtjevIDParameter = zahtjevID.HasValue ?
                new ObjectParameter("zahtjevID", zahtjevID) :
                new ObjectParameter("zahtjevID", typeof(int));
    
            var odobrenoParameter = odobreno.HasValue ?
                new ObjectParameter("odobreno", odobreno) :
                new ObjectParameter("odobreno", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OdobriPrijavuUDom", zahtjevIDParameter, odobrenoParameter);
        }
    
        public virtual int PacijentInsert(string ime, string prezime, Nullable<System.DateTime> datumRodjenja, string jMBG, Nullable<System.DateTime> datumPrijave, Nullable<int> skrbnikID, Nullable<int> spolID, Nullable<bool> status, Nullable<int> zaposlenikID, Nullable<int> sobaID)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("Prezime", prezime) :
                new ObjectParameter("Prezime", typeof(string));
    
            var datumRodjenjaParameter = datumRodjenja.HasValue ?
                new ObjectParameter("DatumRodjenja", datumRodjenja) :
                new ObjectParameter("DatumRodjenja", typeof(System.DateTime));
    
            var jMBGParameter = jMBG != null ?
                new ObjectParameter("JMBG", jMBG) :
                new ObjectParameter("JMBG", typeof(string));
    
            var datumPrijaveParameter = datumPrijave.HasValue ?
                new ObjectParameter("DatumPrijave", datumPrijave) :
                new ObjectParameter("DatumPrijave", typeof(System.DateTime));
    
            var skrbnikIDParameter = skrbnikID.HasValue ?
                new ObjectParameter("SkrbnikID", skrbnikID) :
                new ObjectParameter("SkrbnikID", typeof(int));
    
            var spolIDParameter = spolID.HasValue ?
                new ObjectParameter("SpolID", spolID) :
                new ObjectParameter("SpolID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            var zaposlenikIDParameter = zaposlenikID.HasValue ?
                new ObjectParameter("ZaposlenikID", zaposlenikID) :
                new ObjectParameter("ZaposlenikID", typeof(int));
    
            var sobaIDParameter = sobaID.HasValue ?
                new ObjectParameter("SobaID", sobaID) :
                new ObjectParameter("SobaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PacijentInsert", imeParameter, prezimeParameter, datumRodjenjaParameter, jMBGParameter, datumPrijaveParameter, skrbnikIDParameter, spolIDParameter, statusParameter, zaposlenikIDParameter, sobaIDParameter);
        }
    
        public virtual ObjectResult<pacijentLastByID_Result> pacijentLastByID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<pacijentLastByID_Result>("pacijentLastByID");
        }
    
        public virtual ObjectResult<PregledOdobrenjaKorisnika_Result> PregledOdobrenjaKorisnika(Nullable<int> korisnikID)
        {
            var korisnikIDParameter = korisnikID.HasValue ?
                new ObjectParameter("KorisnikID", korisnikID) :
                new ObjectParameter("KorisnikID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PregledOdobrenjaKorisnika_Result>("PregledOdobrenjaKorisnika", korisnikIDParameter);
        }
    
        public virtual ObjectResult<PreporucenoById_Result> PreporucenoById(Nullable<int> aktivnostID)
        {
            var aktivnostIDParameter = aktivnostID.HasValue ?
                new ObjectParameter("aktivnostID", aktivnostID) :
                new ObjectParameter("aktivnostID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PreporucenoById_Result>("PreporucenoById", aktivnostIDParameter);
        }
    
        public virtual int PrijavaNaAktivnost(Nullable<int> korisnkiID, Nullable<int> aktivnostID)
        {
            var korisnkiIDParameter = korisnkiID.HasValue ?
                new ObjectParameter("KorisnkiID", korisnkiID) :
                new ObjectParameter("KorisnkiID", typeof(int));
    
            var aktivnostIDParameter = aktivnostID.HasValue ?
                new ObjectParameter("AktivnostID", aktivnostID) :
                new ObjectParameter("AktivnostID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PrijavaNaAktivnost", korisnkiIDParameter, aktivnostIDParameter);
        }
    
        public virtual ObjectResult<ProvjeraPrijaveNaAktivnost_Result> ProvjeraPrijaveNaAktivnost(Nullable<int> korisnkiID, Nullable<int> aktivnostID)
        {
            var korisnkiIDParameter = korisnkiID.HasValue ?
                new ObjectParameter("KorisnkiID", korisnkiID) :
                new ObjectParameter("KorisnkiID", typeof(int));
    
            var aktivnostIDParameter = aktivnostID.HasValue ?
                new ObjectParameter("AktivnostID", aktivnostID) :
                new ObjectParameter("AktivnostID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProvjeraPrijaveNaAktivnost_Result>("ProvjeraPrijaveNaAktivnost", korisnkiIDParameter, aktivnostIDParameter);
        }
    
        public virtual ObjectResult<SearchByNaziv_Result> SearchByNaziv(string naziv)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchByNaziv_Result>("SearchByNaziv", nazivParameter);
        }
    
        public virtual ObjectResult<Select_ByVrstaAktivnosti_Result> Select_ByVrstaAktivnosti(Nullable<int> vrstaID)
        {
            var vrstaIDParameter = vrstaID.HasValue ?
                new ObjectParameter("VrstaID", vrstaID) :
                new ObjectParameter("VrstaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Select_ByVrstaAktivnosti_Result>("Select_ByVrstaAktivnosti", vrstaIDParameter);
        }
    
        public virtual ObjectResult<Select_ByVrstaNazivAktivnosti_Result> Select_ByVrstaNazivAktivnosti(Nullable<int> vrstaID, string naziv)
        {
            var vrstaIDParameter = vrstaID.HasValue ?
                new ObjectParameter("VrstaID", vrstaID) :
                new ObjectParameter("VrstaID", typeof(int));
    
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Select_ByVrstaNazivAktivnosti_Result>("Select_ByVrstaNazivAktivnosti", vrstaIDParameter, nazivParameter);
        }
    
        public virtual int SetOdobriAktivnost2(Nullable<int> aktivnostKorisnikID)
        {
            var aktivnostKorisnikIDParameter = aktivnostKorisnikID.HasValue ?
                new ObjectParameter("AktivnostKorisnikID", aktivnostKorisnikID) :
                new ObjectParameter("AktivnostKorisnikID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetOdobriAktivnost2", aktivnostKorisnikIDParameter);
        }
    
        public virtual int SkrbnikInsert(string ime, string prezime, string adresa, string mail, string telefon, Nullable<int> spolID, Nullable<System.DateTime> datum, Nullable<bool> status)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("Prezime", prezime) :
                new ObjectParameter("Prezime", typeof(string));
    
            var adresaParameter = adresa != null ?
                new ObjectParameter("Adresa", adresa) :
                new ObjectParameter("Adresa", typeof(string));
    
            var mailParameter = mail != null ?
                new ObjectParameter("Mail", mail) :
                new ObjectParameter("Mail", typeof(string));
    
            var telefonParameter = telefon != null ?
                new ObjectParameter("Telefon", telefon) :
                new ObjectParameter("Telefon", typeof(string));
    
            var spolIDParameter = spolID.HasValue ?
                new ObjectParameter("SpolID", spolID) :
                new ObjectParameter("SpolID", typeof(int));
    
            var datumParameter = datum.HasValue ?
                new ObjectParameter("Datum", datum) :
                new ObjectParameter("Datum", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SkrbnikInsert", imeParameter, prezimeParameter, adresaParameter, mailParameter, telefonParameter, spolIDParameter, datumParameter, statusParameter);
        }
    
        public virtual ObjectResult<skrbnikLastByID_Result> skrbnikLastByID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<skrbnikLastByID_Result>("skrbnikLastByID");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<ZahtjeviByParametri1_Result> ZahtjeviByParametri1(Nullable<int> zahtjevID, Nullable<int> korisnikID, Nullable<int> pacijentID)
        {
            var zahtjevIDParameter = zahtjevID.HasValue ?
                new ObjectParameter("zahtjevID", zahtjevID) :
                new ObjectParameter("zahtjevID", typeof(int));
    
            var korisnikIDParameter = korisnikID.HasValue ?
                new ObjectParameter("korisnikID", korisnikID) :
                new ObjectParameter("korisnikID", typeof(int));
    
            var pacijentIDParameter = pacijentID.HasValue ?
                new ObjectParameter("pacijentID", pacijentID) :
                new ObjectParameter("pacijentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ZahtjeviByParametri1_Result>("ZahtjeviByParametri1", zahtjevIDParameter, korisnikIDParameter, pacijentIDParameter);
        }
    
        public virtual ObjectResult<ZahtjevOdobren_Result> ZahtjevOdobren(Nullable<int> korisnikID)
        {
            var korisnikIDParameter = korisnikID.HasValue ?
                new ObjectParameter("KorisnikID", korisnikID) :
                new ObjectParameter("KorisnikID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ZahtjevOdobren_Result>("ZahtjevOdobren", korisnikIDParameter);
        }
    
        public virtual int ZaposleniciInsertt(string ime, string prezime, Nullable<System.DateTime> datumRodjenja, string adresa, string mail, string telefon, string spol, Nullable<int> ulogeID, Nullable<bool> status, string korisnickoIme, string lozinkaHash, string lozinkaSlt)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("Prezime", prezime) :
                new ObjectParameter("Prezime", typeof(string));
    
            var datumRodjenjaParameter = datumRodjenja.HasValue ?
                new ObjectParameter("DatumRodjenja", datumRodjenja) :
                new ObjectParameter("DatumRodjenja", typeof(System.DateTime));
    
            var adresaParameter = adresa != null ?
                new ObjectParameter("Adresa", adresa) :
                new ObjectParameter("Adresa", typeof(string));
    
            var mailParameter = mail != null ?
                new ObjectParameter("Mail", mail) :
                new ObjectParameter("Mail", typeof(string));
    
            var telefonParameter = telefon != null ?
                new ObjectParameter("Telefon", telefon) :
                new ObjectParameter("Telefon", typeof(string));
    
            var spolParameter = spol != null ?
                new ObjectParameter("Spol", spol) :
                new ObjectParameter("Spol", typeof(string));
    
            var ulogeIDParameter = ulogeID.HasValue ?
                new ObjectParameter("UlogeID", ulogeID) :
                new ObjectParameter("UlogeID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var korisnickoImeParameter = korisnickoIme != null ?
                new ObjectParameter("KorisnickoIme", korisnickoIme) :
                new ObjectParameter("KorisnickoIme", typeof(string));
    
            var lozinkaHashParameter = lozinkaHash != null ?
                new ObjectParameter("LozinkaHash", lozinkaHash) :
                new ObjectParameter("LozinkaHash", typeof(string));
    
            var lozinkaSltParameter = lozinkaSlt != null ?
                new ObjectParameter("LozinkaSlt", lozinkaSlt) :
                new ObjectParameter("LozinkaSlt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ZaposleniciInsertt", imeParameter, prezimeParameter, datumRodjenjaParameter, adresaParameter, mailParameter, telefonParameter, spolParameter, ulogeIDParameter, statusParameter, korisnickoImeParameter, lozinkaHashParameter, lozinkaSltParameter);
        }
    
        public virtual ObjectResult<ZaposlenikByUserName_Result> ZaposlenikByUserName(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ZaposlenikByUserName_Result>("ZaposlenikByUserName", usernameParameter);
        }
    
        public virtual ObjectResult<esp_PregledKorisnikaDoma_Result> esp_PregledKorisnikaDoma(string jmbg, string korisnickoIme)
        {
            var jmbgParameter = jmbg != null ?
                new ObjectParameter("jmbg", jmbg) :
                new ObjectParameter("jmbg", typeof(string));
    
            var korisnickoImeParameter = korisnickoIme != null ?
                new ObjectParameter("KorisnickoIme", korisnickoIme) :
                new ObjectParameter("KorisnickoIme", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<esp_PregledKorisnikaDoma_Result>("esp_PregledKorisnikaDoma", jmbgParameter, korisnickoImeParameter);
        }
    
        public virtual ObjectResult<Select_ByVrstaNazivAktivnosti1_Result> Select_ByVrstaNazivAktivnosti1(Nullable<int> vrstaID, string naziv)
        {
            var vrstaIDParameter = vrstaID.HasValue ?
                new ObjectParameter("VrstaID", vrstaID) :
                new ObjectParameter("VrstaID", typeof(int));
    
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Select_ByVrstaNazivAktivnosti1_Result>("Select_ByVrstaNazivAktivnosti1", vrstaIDParameter, nazivParameter);
        }
    
        public virtual ObjectResult<test_Result> test(Nullable<int> vrstaID, string naziv)
        {
            var vrstaIDParameter = vrstaID.HasValue ?
                new ObjectParameter("VrstaID", vrstaID) :
                new ObjectParameter("VrstaID", typeof(int));
    
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<test_Result>("test", vrstaIDParameter, nazivParameter);
        }
    }
}
